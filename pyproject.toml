[tool.poetry]
name = "catchall-api"
version = "1.1.0"
description = "Catchall API that echoes back requests"
authors = ["Mathieu Lemay <acidrain1@gmail.com>"]
license = "MIT"
readme = "README.md"
include = ["catchall_api/py.typed"]

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "^2.1.1"
pydantic-settings = "^2.0.2"
fastapi = "^0.100.1"
coloredlogs = "^15.0.1"
uvicorn = "^0.23.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
black = "^23.3.0"
mypy = "^1.2.0"
pytest-asyncio = "^0.20.3"
httpx = "^0.23.3"
pytest-docker = "^2.0.0"
pytest-cov = "^4.0.0"
time-machine = "^2.9.0"

[tool.poetry.scripts]
catchall-api = "catchall_api.api:main"

[tool.black]
preview = true

[tool.isort]
profile = "black"

[tool.mypy]
namespace_packages=true
explicit_package_bases=true
strict=true
show_error_codes=true
plugins=["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests/unit", "tests/integration", "tests/module", "tests"]
# Disable anyio to avoid conflict and force asyncio to load before entrypoints
# https://docs.pytest.org/en/6.2.x/writing_plugins.html#plugin-discovery-order-at-tool-startup
addopts = ["-p", "no:anyio", "-p", "asyncio"]
asyncio_mode = "auto"

[tool.ruff]
#line-length = 120
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
select = [
    "ALL"
]
ignore = [
    "COM",  # flake8-commas
    "D",  # pydocstyle
    "FIX",  # flake8-fixme
    "PTH",  # flake8-use-pathlib
    "TD",  # flake8-todos

    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "PLR0913",  # Too many arguments to function call
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying long messages outside the exception class
]


[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S101",  # Use of assert detected
    "FBT001",  # Boolean positional arg in function definition (Annoying for fixtures)
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
